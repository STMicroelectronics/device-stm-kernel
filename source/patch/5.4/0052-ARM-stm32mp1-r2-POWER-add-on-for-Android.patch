From 3d75a680ea9dc13ba81a2bf30c2e6235133024ad Mon Sep 17 00:00:00 2001
From: Nicolas LOUBOUTIN <nicolas.louboutin@st.com>
Date: Thu, 2 Jul 2020 14:07:43 +0200
Subject: [PATCH 24/31] ARM-stm32mp1-r2-POWER add-on for Android

---
 arch/arm/boot/dts/stm32mp15xx-edx.dtsi |   5 +
 drivers/power/supply/Kconfig           |  10 +
 drivers/power/supply/Makefile          |   1 +
 drivers/power/supply/dummy-charger.c   | 293 +++++++++++++++++++++++++
 include/linux/power/dummy-charger.h    |  38 ++++
 5 files changed, 347 insertions(+)
 create mode 100644 drivers/power/supply/dummy-charger.c
 create mode 100644 include/linux/power/dummy-charger.h

diff --git a/arch/arm/boot/dts/stm32mp15xx-edx.dtsi b/arch/arm/boot/dts/stm32mp15xx-edx.dtsi
index c67d57cc0237..0c57a9607454 100644
--- a/arch/arm/boot/dts/stm32mp15xx-edx.dtsi
+++ b/arch/arm/boot/dts/stm32mp15xx-edx.dtsi
@@ -78,6 +78,11 @@
 		states = <1800000 0x1 2900000 0x0>;
 	};
 
+	charger: charger-0 {
+		compatible = "st,dummy-charger";
+		status = "okay";
+	};
+
 	vin: vin {
 		compatible = "regulator-fixed";
 		regulator-name = "vin";
diff --git a/drivers/power/supply/Kconfig b/drivers/power/supply/Kconfig
index dff0a9fc54ea..0ac458777314 100644
--- a/drivers/power/supply/Kconfig
+++ b/drivers/power/supply/Kconfig
@@ -710,4 +710,14 @@ config CHARGER_WILCO
 	  information can be found in
 	  Documentation/ABI/testing/sysfs-class-power-wilco
 
+config CHARGER_DUMMY
+	tristate "Dummy battery charger driver"
+	depends on OF
+	help
+	  This adds support for a dummy battery charger (type = USB type C / Mains).
+	  It's only useful if you need a power supply information for devices
+	  not having any battery.
+
+	  If you are unsure, say N.
+
 endif # POWER_SUPPLY
diff --git a/drivers/power/supply/Makefile b/drivers/power/supply/Makefile
index 6c7da920ea83..f942d5bec9a1 100644
--- a/drivers/power/supply/Makefile
+++ b/drivers/power/supply/Makefile
@@ -92,3 +92,4 @@ obj-$(CONFIG_FUEL_GAUGE_SC27XX)	+= sc27xx_fuel_gauge.o
 obj-$(CONFIG_CHARGER_UCS1002)	+= ucs1002_power.o
 obj-$(CONFIG_CHARGER_BD70528)	+= bd70528-charger.o
 obj-$(CONFIG_CHARGER_WILCO)	+= wilco-charger.o
+obj-$(CONFIG_CHARGER_DUMMY)	+= dummy-charger.o
diff --git a/drivers/power/supply/dummy-charger.c b/drivers/power/supply/dummy-charger.c
new file mode 100644
index 000000000000..5509e0e608c1
--- /dev/null
+++ b/drivers/power/supply/dummy-charger.c
@@ -0,0 +1,293 @@
+/*
+ * Copyright (C) STMicroelectronics 2018
+ *
+ * Author: Nicolas Louboutin <nicolas.louboutin@st.com>
+ *
+ * License terms:  GNU General Public License (GPL), version 2
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/power_supply.h>
+
+#include <linux/of.h>
+#include <linux/of_device.h>
+
+#include <linux/platform_device.h>
+
+#include <linux/power/dummy-charger.h>
+
+struct dummy_device_info {
+	struct device *dev;
+	struct power_supply *psy_bat;
+	struct dummy_bat *bat;
+	struct power_supply *psy_usb_c;
+	struct dummy_charger *usb_c_charger;
+	struct power_supply *psy_ac;
+	struct dummy_charger *ac_charger;
+};
+
+static struct dummy_bat dummy_bat_default = {
+	.capacity = 100,
+	.charge_counter = 500000, /* units of µAh = 500mAh */
+	.charge_full = 3000000, /* units of µAh = 3000mAh */
+	.current_avg = 500000, /* units of µA = 500mA */
+	.current_max = 2000000, /* units of µA = 2A */
+	.current_now = 300000, /* units of µA = 300mA */
+	.cycle_count = 32, /* number of charge cycles = 32 */
+	.health = POWER_SUPPLY_HEALTH_GOOD,
+	.present = 1,  /* battery always present */
+	.status = POWER_SUPPLY_STATUS_FULL,
+	.technology = POWER_SUPPLY_TECHNOLOGY_LIPO,
+	.temp = 800, /* units of 0.1°C = 80°C */
+	.voltage_max = 3300000, /* units of µV = 3,3V */
+	.voltage_now = 3300000, /* units of µV = 3,3V */
+};
+
+static struct dummy_charger dummy_charger_usb_c_default = {
+	.online = 1, /* always online */
+};
+
+static struct dummy_charger dummy_charger_ac_default = {
+	.online = 1, /* always online */
+};
+
+static enum power_supply_property dummy_bat_props[] = {
+	POWER_SUPPLY_PROP_CAPACITY,
+	POWER_SUPPLY_PROP_CHARGE_COUNTER,
+	POWER_SUPPLY_PROP_CHARGE_FULL,
+	POWER_SUPPLY_PROP_CURRENT_AVG,
+	POWER_SUPPLY_PROP_CURRENT_MAX,
+	POWER_SUPPLY_PROP_CURRENT_NOW,
+	POWER_SUPPLY_PROP_CYCLE_COUNT,
+	POWER_SUPPLY_PROP_HEALTH,
+	POWER_SUPPLY_PROP_PRESENT,
+	POWER_SUPPLY_PROP_STATUS,
+	POWER_SUPPLY_PROP_TECHNOLOGY,
+	POWER_SUPPLY_PROP_TEMP,
+	POWER_SUPPLY_PROP_VOLTAGE_MAX,
+	POWER_SUPPLY_PROP_VOLTAGE_NOW,
+};
+
+static enum power_supply_property dummy_charger_props[] = {
+	POWER_SUPPLY_PROP_ONLINE,
+};
+
+static int dummy_battery_get_prop(struct power_supply *psy,
+					   enum power_supply_property psp,
+					   union power_supply_propval *val)
+{
+	struct dummy_device_info *di = power_supply_get_drvdata(psy);
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_CAPACITY:
+		val->intval = di->bat->capacity;
+		break;
+	case POWER_SUPPLY_PROP_CHARGE_COUNTER:
+		val->intval = di->bat->charge_counter;
+		break;
+	case POWER_SUPPLY_PROP_CHARGE_FULL:
+		val->intval = di->bat->charge_full;
+		break;
+	case POWER_SUPPLY_PROP_CURRENT_AVG:
+		val->intval = di->bat->current_avg;
+		break;
+	case POWER_SUPPLY_PROP_CURRENT_MAX:
+		val->intval = di->bat->current_max;
+		break;
+	case POWER_SUPPLY_PROP_CURRENT_NOW:
+		val->intval = di->bat->current_now;
+		break;
+	case POWER_SUPPLY_PROP_CYCLE_COUNT:
+		val->intval = di->bat->cycle_count;
+		break;
+	case POWER_SUPPLY_PROP_HEALTH:
+		val->intval = di->bat->health;
+		break;
+	case POWER_SUPPLY_PROP_PRESENT:
+		val->intval = di->bat->present;
+		break;
+	case POWER_SUPPLY_PROP_STATUS:
+		val->intval = di->bat->status;
+		break;
+	case POWER_SUPPLY_PROP_TECHNOLOGY:
+		val->intval = di->bat->technology;
+		break;
+	case POWER_SUPPLY_PROP_TEMP:
+		val->intval = di->bat->temp;
+		break;
+	case POWER_SUPPLY_PROP_VOLTAGE_MAX:
+		val->intval = di->bat->voltage_max;
+		break;
+	case POWER_SUPPLY_PROP_VOLTAGE_NOW:
+		val->intval = di->bat->voltage_now;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int dummy_charger_get_prop(struct power_supply *psy,
+					   enum power_supply_property psp,
+					   union power_supply_propval *val)
+{
+	struct dummy_device_info *di = power_supply_get_drvdata(psy);
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_ONLINE:
+		if (psy->desc->type == POWER_SUPPLY_TYPE_USB_TYPE_C) {
+			val->intval = di->usb_c_charger->online;
+		} else if (psy->desc->type == POWER_SUPPLY_TYPE_MAINS) {
+			val->intval = di->ac_charger->online;
+		} else {
+			return -EINVAL;
+		}
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static const struct power_supply_desc dummy_bat_desc = {
+	.name		= "dummy-battery",
+	.type		= POWER_SUPPLY_TYPE_BATTERY,
+	.properties	= dummy_bat_props,
+	.num_properties	= ARRAY_SIZE(dummy_bat_props),
+	.get_property	= dummy_battery_get_prop,
+};
+
+static const struct power_supply_desc dummy_charger_usb_c_desc = {
+	.name		= "dummy-charger-usb_c",
+	.type		= POWER_SUPPLY_TYPE_USB_TYPE_C,
+	.properties	= dummy_charger_props,
+	.num_properties	= ARRAY_SIZE(dummy_charger_props),
+	.get_property	= dummy_charger_get_prop,
+};
+
+static const struct power_supply_desc dummy_charger_ac_desc = {
+	.name		= "dummy-charger-ac",
+	.type		= POWER_SUPPLY_TYPE_MAINS,
+	.properties	= dummy_charger_props,
+	.num_properties	= ARRAY_SIZE(dummy_charger_props),
+	.get_property	= dummy_charger_get_prop,
+};
+
+
+static const struct of_device_id dummy_dt_match[] = {
+	{ .compatible = "st,dummy-charger" },
+	{ /* end node */ },
+};
+MODULE_DEVICE_TABLE(of, dummy_dt_match);
+
+
+static int dummy_bat_probe(struct platform_device *pdev)
+{
+	const struct of_device_id *match;
+	static char *battery[] = { "dummy-battery" };
+	struct power_supply_config bat_psy_cfg = {},
+						usb_c_psy_cfg = {},
+						ac_psy_cfg = {};
+	struct dummy_device_info *di;
+
+	match = of_match_device(dummy_dt_match, &pdev->dev);
+	if (!match)
+		return -ENODEV;
+
+	di = devm_kzalloc(&pdev->dev, sizeof(*di), GFP_KERNEL);
+	if (!di)
+		return -ENOMEM;
+
+	platform_set_drvdata(pdev, di);
+
+	di->dev = &pdev->dev;
+	di->bat = &dummy_bat_default;
+
+	usb_c_psy_cfg.supplied_to = battery;
+	usb_c_psy_cfg.num_supplicants = ARRAY_SIZE(battery);
+	usb_c_psy_cfg.drv_data = di;
+
+	di->usb_c_charger = &dummy_charger_usb_c_default;
+	di->psy_usb_c = power_supply_register(&pdev->dev,
+						&dummy_charger_usb_c_desc,
+						&usb_c_psy_cfg);
+	if (IS_ERR(di->psy_usb_c)) {
+		dev_err(&pdev->dev, "failed: dummy usb-c power supply register");
+		return PTR_ERR(di->psy_usb_c);
+	}
+
+	ac_psy_cfg.supplied_to = battery;
+	ac_psy_cfg.num_supplicants = ARRAY_SIZE(battery);
+	ac_psy_cfg.drv_data = di;
+
+	di->ac_charger = &dummy_charger_ac_default;
+	di->psy_ac = power_supply_register(&pdev->dev,
+						  &dummy_charger_ac_desc,
+						  &ac_psy_cfg);
+	if (IS_ERR(di->psy_ac)) {
+		dev_err(&pdev->dev, "failed: dummy ac power supply register");
+		power_supply_unregister(di->psy_usb_c);
+		return PTR_ERR(di->psy_ac);
+	}
+
+	bat_psy_cfg.drv_data = di;
+
+	di->bat = &dummy_bat_default;
+	di->psy_bat = power_supply_register(&pdev->dev,
+						  &dummy_bat_desc,
+						  &bat_psy_cfg);
+	if (IS_ERR(di->psy_bat)) {
+		dev_err(&pdev->dev, "failed: dummy battery register");
+		power_supply_unregister(di->psy_usb_c);
+		power_supply_unregister(di->psy_ac);
+		return PTR_ERR(di->psy_bat);
+	}
+
+	return 0;
+}
+
+static int dummy_bat_remove(struct platform_device *pdev)
+{
+	struct dummy_device_info *di = platform_get_drvdata(pdev);
+
+	power_supply_unregister(di->psy_usb_c);
+	power_supply_unregister(di->psy_ac);
+	power_supply_unregister(di->psy_bat);
+
+	return 0;
+}
+
+#ifdef CONFIG_PM
+static int dummy_bat_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	return 0;
+}
+
+static int dummy_bat_resume(struct platform_device *pdev)
+{
+	return 0;
+}
+#else
+#define dummy_bat_suspend NULL
+#define dummy_bat_resume NULL
+#endif
+
+static struct platform_driver dummy_bat_driver = {
+	.driver	= {
+		.name	= "dummy-charger",
+		.of_match_table = of_match_ptr(dummy_dt_match),
+	},
+	.probe		= dummy_bat_probe,
+	.remove		= dummy_bat_remove,
+	.suspend	= dummy_bat_suspend,
+	.resume		= dummy_bat_resume,
+};
+
+module_platform_driver(dummy_bat_driver);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Nicolas Louboutin");
+MODULE_DESCRIPTION("Dummy battery charger driver");
diff --git a/include/linux/power/dummy-charger.h b/include/linux/power/dummy-charger.h
new file mode 100644
index 000000000000..cd4d60932255
--- /dev/null
+++ b/include/linux/power/dummy-charger.h
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) STMicroelectronics 2018
+ *
+ * Author: Nicolas Louboutin <nicolas.louboutin@st.com>
+ *
+ * License terms:  GNU General Public License (GPL), version 2
+ */
+
+#ifndef _LINUX_DUMMY_CHARGER_H_
+#define _LINUX_DUMMY_CHARGER_H_
+
+struct dummy_bat {
+	int capacity;
+	int charge_counter;
+	int charge_full;
+	int current_avg;
+	int current_max;
+	int current_now;
+	int cycle_count;
+	int health;
+	int present;
+	int status;
+	int technology;
+	int temp;
+	int voltage_max;
+	int voltage_now;
+};
+
+struct dummy_charger {
+	int online;
+	int current_avg;
+	int current_max;
+	int current_now;
+	int voltage_max;
+	int voltage_now;
+};
+
+#endif
-- 
2.17.1

