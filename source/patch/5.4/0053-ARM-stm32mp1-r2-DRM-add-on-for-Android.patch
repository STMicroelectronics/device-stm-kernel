From ce041addc3d80f028552a1d2887a288d53f5d18a Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@st.com>
Date: Thu, 5 Nov 2020 11:19:26 +0100
Subject: [PATCH 03/14] ARM-stm32mp1-r2-DRM add-on for Android

Signed-off-by: Nicolas LOUBOUTIN <nicolas.louboutin@st.com>
Signed-off-by: Yannick FERTRE <yannick.fertre@st.com>
---
 drivers/gpu/drm/bridge/synopsys/dw-mipi-dsi.c | 51 +++++++++++++++----
 drivers/gpu/drm/drm_bridge.c                  |  7 +--
 drivers/gpu/drm/stm/drv.c                     |  5 ++
 drivers/gpu/drm/stm/ltdc.c                    | 28 ++++++++++
 4 files changed, 79 insertions(+), 12 deletions(-)

diff --git a/drivers/gpu/drm/bridge/synopsys/dw-mipi-dsi.c b/drivers/gpu/drm/bridge/synopsys/dw-mipi-dsi.c
index 34a9569e28f6..35b741ec2ec1 100644
--- a/drivers/gpu/drm/bridge/synopsys/dw-mipi-dsi.c
+++ b/drivers/gpu/drm/bridge/synopsys/dw-mipi-dsi.c
@@ -262,6 +262,7 @@ struct dw_mipi_dsi {
 	struct dw_mipi_dsi *slave; /* dual-dsi slave ptr */
 
 	const struct dw_mipi_dsi_plat_data *plat_data;
+	struct drm_display_mode mode;
 };
 
 /*
@@ -824,6 +825,8 @@ static void dw_mipi_dsi_dphy_interface_config(struct dw_mipi_dsi *dsi)
 
 static void dw_mipi_dsi_dphy_init(struct dw_mipi_dsi *dsi)
 {
+	DRM_DEBUG_DRIVER("\n");
+
 	/* Clear PHY state */
 	dsi_write(dsi, DSI_PHY_RSTZ, PHY_DISFORCEPLL | PHY_DISABLECLK
 		  | PHY_RSTZ | PHY_SHUTDOWNZ);
@@ -837,6 +840,8 @@ static void dw_mipi_dsi_dphy_enable(struct dw_mipi_dsi *dsi)
 	u32 val;
 	int ret;
 
+	DRM_DEBUG_DRIVER("\n");
+
 	dsi_write(dsi, DSI_PHY_RSTZ, PHY_ENFORCEPLL | PHY_ENABLECLK |
 		  PHY_UNRSTZ | PHY_UNSHUTDOWNZ);
 
@@ -860,11 +865,13 @@ static void dw_mipi_dsi_clear_err(struct dw_mipi_dsi *dsi)
 	dsi_write(dsi, DSI_INT_MSK1, 0);
 }
 
-static void dw_mipi_dsi_bridge_post_disable(struct drm_bridge *bridge)
+static void dw_mipi_dsi_bridge_post_disable(struct drm_bridge *bridge, struct drm_atomic_state *state)
 {
 	struct dw_mipi_dsi *dsi = bridge_to_dsi(bridge);
 	const struct dw_mipi_dsi_phy_ops *phy_ops = dsi->plat_data->phy_ops;
 
+	DRM_DEBUG_DRIVER("\n");
+
 	if (phy_ops->power_off)
 		phy_ops->power_off(dsi->plat_data->priv_data);
 
@@ -918,6 +925,8 @@ static void dw_mipi_dsi_mode_set(struct dw_mipi_dsi *dsi,
 	int ret;
 	u32 lanes = dw_mipi_dsi_get_lanes(dsi);
 
+	DRM_DEBUG_DRIVER("\n");
+
 	clk_prepare_enable(dsi->pclk);
 
 	ret = phy_ops->get_lane_mbps(priv_data, adjusted_mode, dsi->mode_flags,
@@ -959,16 +968,31 @@ static void dw_mipi_dsi_bridge_mode_set(struct drm_bridge *bridge,
 {
 	struct dw_mipi_dsi *dsi = bridge_to_dsi(bridge);
 
-	dw_mipi_dsi_mode_set(dsi, adjusted_mode);
+	DRM_DEBUG_DRIVER("\n");
+
+	memcpy(&dsi->mode, adjusted_mode, sizeof(struct drm_display_mode));
+}
+
+static void dw_mipi_dsi_bridge_pre_enable(struct drm_bridge *bridge, struct drm_atomic_state *state)
+{
+	struct dw_mipi_dsi *dsi = bridge_to_dsi(bridge);
+
+	DRM_DEBUG_DRIVER("\n");
+
+	dw_mipi_dsi_mode_set(dsi, &dsi->mode);
 	if (dsi->slave)
-		dw_mipi_dsi_mode_set(dsi->slave, adjusted_mode);
+		dw_mipi_dsi_mode_set(dsi->slave, &dsi->mode);
+
+	dw_mipi_dsi_set_mode(dsi, 0);
 }
 
-static void dw_mipi_dsi_bridge_enable(struct drm_bridge *bridge)
+static void dw_mipi_dsi_bridge_enable(struct drm_bridge *bridge, struct drm_atomic_state *state)
 {
 	struct dw_mipi_dsi *dsi = bridge_to_dsi(bridge);
 	const struct dw_mipi_dsi_phy_ops *phy_ops = dsi->plat_data->phy_ops;
 
+	DRM_DEBUG_DRIVER("\n");
+
 	/* Switch to video mode for panel-bridge enable & panel enable */
 	dw_mipi_dsi_set_mode(dsi, MIPI_DSI_MODE_VIDEO);
 	if (dsi->slave)
@@ -978,6 +1002,11 @@ static void dw_mipi_dsi_bridge_enable(struct drm_bridge *bridge)
 		phy_ops->power_on(dsi->plat_data->priv_data);
 }
 
+static void dw_mipi_dsi_bridge_disable(struct drm_bridge *bridge, struct drm_atomic_state *state)
+{
+	DRM_DEBUG_DRIVER("\n");
+}
+
 static enum drm_mode_status
 dw_mipi_dsi_bridge_mode_valid(struct drm_bridge *bridge,
 			      const struct drm_display_mode *mode)
@@ -986,6 +1015,8 @@ dw_mipi_dsi_bridge_mode_valid(struct drm_bridge *bridge,
 	const struct dw_mipi_dsi_plat_data *pdata = dsi->plat_data;
 	enum drm_mode_status mode_status = MODE_OK;
 
+	DRM_DEBUG_DRIVER("\n");
+
 	if (pdata->mode_valid)
 		mode_status = pdata->mode_valid(pdata->priv_data, mode);
 
@@ -1009,11 +1040,13 @@ static int dw_mipi_dsi_bridge_attach(struct drm_bridge *bridge)
 }
 
 static const struct drm_bridge_funcs dw_mipi_dsi_bridge_funcs = {
-	.mode_set     = dw_mipi_dsi_bridge_mode_set,
-	.enable	      = dw_mipi_dsi_bridge_enable,
-	.post_disable = dw_mipi_dsi_bridge_post_disable,
-	.mode_valid   = dw_mipi_dsi_bridge_mode_valid,
-	.attach	      = dw_mipi_dsi_bridge_attach,
+	.mode_set     		= dw_mipi_dsi_bridge_mode_set,
+	.atomic_pre_enable   	= dw_mipi_dsi_bridge_pre_enable,
+	.atomic_enable	      	= dw_mipi_dsi_bridge_enable,
+	.atomic_post_disable 	= dw_mipi_dsi_bridge_post_disable,
+	.atomic_disable 	= dw_mipi_dsi_bridge_disable,
+	.mode_valid   		= dw_mipi_dsi_bridge_mode_valid,
+	.attach	      		= dw_mipi_dsi_bridge_attach,
 };
 
 #ifdef CONFIG_DEBUG_FS
diff --git a/drivers/gpu/drm/drm_bridge.c b/drivers/gpu/drm/drm_bridge.c
index cba537c99e43..942d3ad0f1c5 100644
--- a/drivers/gpu/drm/drm_bridge.c
+++ b/drivers/gpu/drm/drm_bridge.c
@@ -398,12 +398,13 @@ void drm_atomic_bridge_post_disable(struct drm_bridge *bridge,
 	if (!bridge)
 		return;
 
+	drm_atomic_bridge_post_disable(bridge->next, state);
+
 	if (bridge->funcs->atomic_post_disable)
 		bridge->funcs->atomic_post_disable(bridge, state);
 	else if (bridge->funcs->post_disable)
 		bridge->funcs->post_disable(bridge);
 
-	drm_atomic_bridge_post_disable(bridge->next, state);
 }
 EXPORT_SYMBOL(drm_atomic_bridge_post_disable);
 
@@ -426,12 +427,12 @@ void drm_atomic_bridge_pre_enable(struct drm_bridge *bridge,
 	if (!bridge)
 		return;
 
-	drm_atomic_bridge_pre_enable(bridge->next, state);
-
 	if (bridge->funcs->atomic_pre_enable)
 		bridge->funcs->atomic_pre_enable(bridge, state);
 	else if (bridge->funcs->pre_enable)
 		bridge->funcs->pre_enable(bridge);
+
+	drm_atomic_bridge_pre_enable(bridge->next, state);
 }
 EXPORT_SYMBOL(drm_atomic_bridge_pre_enable);
 
diff --git a/drivers/gpu/drm/stm/drv.c b/drivers/gpu/drm/stm/drv.c
index 5a9f9aca8bc2..727f9cee0c67 100644
--- a/drivers/gpu/drm/stm/drv.c
+++ b/drivers/gpu/drm/stm/drv.c
@@ -35,6 +35,10 @@ static const struct drm_mode_config_funcs drv_mode_config_funcs = {
 	.atomic_commit = drm_atomic_helper_commit,
 };
 
+static const struct drm_mode_config_helper_funcs drv_mode_config_helpers = {
+	.atomic_commit_tail = drm_atomic_helper_commit_tail_rpm,
+};
+
 static int stm_gem_cma_dumb_create(struct drm_file *file,
 				   struct drm_device *dev,
 				   struct drm_mode_create_dumb *args)
@@ -102,6 +106,7 @@ static int drv_load(struct drm_device *ddev)
 	ddev->mode_config.max_width = STM_MAX_FB_WIDTH;
 	ddev->mode_config.max_height = STM_MAX_FB_HEIGHT;
 	ddev->mode_config.funcs = &drv_mode_config_funcs;
+	ddev->mode_config.helper_private = &drv_mode_config_helpers;
 
 	ret = ltdc_load(ddev);
 	if (ret)
diff --git a/drivers/gpu/drm/stm/ltdc.c b/drivers/gpu/drm/stm/ltdc.c
index 1f7836be2e6a..9a5b3926d8cc 100644
--- a/drivers/gpu/drm/stm/ltdc.c
+++ b/drivers/gpu/drm/stm/ltdc.c
@@ -421,9 +421,19 @@ static void ltdc_crtc_atomic_enable(struct drm_crtc *crtc,
 				    struct drm_crtc_state *old_state)
 {
 	struct ltdc_device *ldev = crtc_to_ltdc(crtc);
+	struct drm_device *ddev = crtc->dev;
+	int ret;
 
 	DRM_DEBUG_DRIVER("\n");
 
+	if (!pm_runtime_active(ddev->dev)) {
+		ret = pm_runtime_get_sync(ddev->dev);
+		if (ret) {
+			DRM_ERROR("Failed to set mode, cannot get sync\n");
+			return;
+		}
+	}
+
 	/* Sets the background color value */
 	reg_write(ldev->regs, LTDC_BCCR, BCCR_BCBLACK);
 
@@ -444,6 +454,15 @@ static void ltdc_crtc_atomic_disable(struct drm_crtc *crtc,
 
 	DRM_DEBUG_DRIVER("\n");
 
+	/* Flush remaining vblank event*/
+	if (crtc->state->event && !crtc->state->active) {
+		spin_lock_irq(&crtc->dev->event_lock);
+		drm_crtc_send_vblank_event(crtc, crtc->state->event);
+		spin_unlock_irq(&crtc->dev->event_lock);
+
+		crtc->state->event = NULL;
+	}
+
 	drm_crtc_vblank_off(crtc);
 
 	/* disable IRQ */
@@ -538,11 +557,17 @@ static void ltdc_crtc_mode_set_nofb(struct drm_crtc *crtc)
 	struct drm_device *ddev = crtc->dev;
 	struct drm_display_mode *mode = &crtc->state->adjusted_mode;
 	struct videomode vm;
+	struct drm_crtc_state *crtc_state = crtc->state;
 	u32 hsync, vsync, accum_hbp, accum_vbp, accum_act_w, accum_act_h;
 	u32 total_width, total_height;
 	u32 val;
 	int ret;
 
+	if (!crtc_state->enable){
+		DRM_ERROR("CRTC:%d not enabled\n",crtc->base.id);
+		return;
+	}
+
 	if (!pm_runtime_active(ddev->dev)) {
 		ret = pm_runtime_get_sync(ddev->dev);
 		if (ret) {
@@ -1011,6 +1036,8 @@ static int ltdc_crtc_init(struct drm_device *ddev, struct drm_crtc *crtc)
 		return -EINVAL;
 	}
 
+	drm_plane_create_zpos_immutable_property(primary, 0);
+
 	ret = drm_crtc_init_with_planes(ddev, crtc, primary, NULL,
 					&ltdc_crtc_funcs, NULL);
 	if (ret) {
@@ -1033,6 +1060,7 @@ static int ltdc_crtc_init(struct drm_device *ddev, struct drm_crtc *crtc)
 			DRM_ERROR("Can not create overlay plane %d\n", i);
 			goto cleanup;
 		}
+		drm_plane_create_zpos_immutable_property(overlay, i);
 	}
 
 	return 0;
-- 
2.17.1

